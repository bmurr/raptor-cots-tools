import struct

from PIL import Image
import numpy as np

RAPTOR_PALETTE = [[0, 0, 0], [226, 222, 222], [218, 214, 214], [210, 206, 206],
                  [202, 198, 198], [194, 194, 194], [186, 186, 186],
                  [182, 178, 178], [174, 170, 170], [165, 161, 161],
                  [157, 157, 157], [149, 149, 149], [141, 141, 141],
                  [137, 133, 133], [129, 125, 125], [121, 121, 121],
                  [113, 113, 113], [105, 105, 105], [97, 97, 97], [93, 89, 89],
                  [85, 85, 85], [76, 76, 76], [68, 68, 68], [60, 60, 60],
                  [52, 52, 52], [48, 48, 48], [40, 40, 40], [32, 32, 32],
                  [24, 24, 24], [16, 16, 16], [8, 8, 8], [4, 4, 4],
                  [246, 105, 109], [230, 93, 97], [218, 80, 85], [206, 68, 76],
                  [190, 56, 64], [178, 48, 56], [165, 40, 48], [149, 32, 40],
                  [137, 24, 36], [125, 16, 28], [109, 12, 24], [97, 8, 16],
                  [85, 4, 12], [68, 0, 8], [56, 0, 4], [36, 0, 4],
                  [234, 222, 141], [218, 206, 121], [202, 194, 105],
                  [190, 178, 85], [174, 165, 72], [157, 149, 60],
                  [141, 137, 48], [129, 121, 36], [113, 109, 28], [97, 97, 20],
                  [85, 80, 12], [68, 68, 8], [56, 52, 4], [40, 40, 0],
                  [24, 24, 0], [12, 12, 0], [255, 157, 97], [238, 129, 72],
                  [222, 113, 60], [206, 97, 52], [190, 85, 44], [174, 68, 36],
                  [161, 56, 28], [145, 44, 20], [129, 36, 16], [113, 24, 12],
                  [101, 16, 8], [85, 12, 4], [68, 4, 0], [52, 0, 0], [36, 0, 0],
                  [24, 0, 0], [246, 202, 28], [238, 178, 28], [230, 157, 24],
                  [222, 137, 24], [214, 117, 24], [206, 101, 20], [198, 85, 20],
                  [190, 68, 20], [178, 64, 16], [165, 60, 16], [157, 56, 12],
                  [145, 52, 12], [137, 48, 12], [125, 44, 8], [105, 36, 4],
                  [89, 28, 4], [141, 161, 129], [125, 149, 113], [113, 141, 97],
                  [101, 133, 85], [89, 125, 72], [72, 117, 60], [64, 109, 48],
                  [52, 101, 40], [40, 93, 32], [32, 80, 24], [24, 72, 16],
                  [12, 60, 8], [8, 48, 4], [4, 36, 0], [0, 24, 0], [0, 12, 0],
                  [198, 206, 255], [182, 190, 242], [170, 178, 230],
                  [153, 161, 222], [141, 145, 210], [129, 133, 198],
                  [117, 121, 190], [105, 109, 178], [97, 97, 165],
                  [85, 85, 157], [76, 76, 145], [68, 68, 133], [60, 56, 125],
                  [52, 48, 113], [40, 36, 89], [28, 24, 68], [89, 178, 255],
                  [80, 157, 238], [72, 145, 222], [68, 125, 206],
                  [60, 113, 190], [56, 97, 178], [48, 85, 161], [44, 72, 145],
                  [36, 60, 129], [32, 48, 113], [28, 40, 101], [20, 32, 85],
                  [16, 24, 68], [12, 16, 52], [8, 8, 36], [4, 4, 24],
                  [109, 170, 178], [97, 157, 165], [85, 149, 157],
                  [72, 141, 149], [60, 133, 141], [52, 121, 133],
                  [44, 113, 125], [36, 105, 117], [28, 97, 109], [20, 89, 97],
                  [16, 80, 89], [8, 72, 80], [4, 64, 72], [4, 56, 64],
                  [0, 36, 44], [0, 20, 28], [222, 206, 238], [210, 194, 226],
                  [198, 182, 214], [186, 174, 202], [174, 161, 190],
                  [165, 153, 178], [153, 141, 165], [141, 129, 153],
                  [129, 121, 141], [117, 109, 129], [109, 101, 117],
                  [97, 89, 105], [85, 76, 93], [72, 68, 80], [52, 48, 56],
                  [32, 28, 36], [238, 214, 190], [230, 206, 182],
                  [226, 198, 170], [218, 186, 161], [210, 182, 157],
                  [206, 174, 149], [198, 165, 141], [194, 157, 133],
                  [186, 149, 125], [182, 141, 117], [174, 133, 113],
                  [170, 125, 105], [161, 117, 97], [153, 109, 93],
                  [149, 101, 85], [141, 97, 80], [137, 89, 72], [129, 85, 68],
                  [125, 76, 64], [117, 68, 56], [113, 64, 52], [105, 56, 48],
                  [101, 52, 44], [93, 48, 40], [85, 40, 36], [80, 36, 32],
                  [72, 32, 28], [68, 28, 24], [60, 24, 20], [56, 16, 16],
                  [40, 12, 8], [20, 0, 0], [218, 206, 182], [210, 198, 174],
                  [206, 190, 165], [198, 186, 161], [194, 178, 153],
                  [186, 174, 149], [182, 165, 141], [174, 157, 137],
                  [170, 153, 129], [165, 145, 125], [157, 141, 117],
                  [153, 133, 113], [145, 125, 109], [141, 121, 101],
                  [133, 117, 97], [129, 109, 93], [121, 101, 85], [117, 97, 80],
                  [109, 89, 76], [105, 85, 72], [101, 80, 68], [93, 72, 60],
                  [89, 68, 56], [80, 60, 52], [76, 56, 48], [68, 52, 44],
                  [64, 48, 40], [56, 40, 36], [52, 36, 32], [48, 32, 28],
                  [32, 16, 12], [16, 8, 4], [36, 105, 117], [56, 121, 133],
                  [44, 113, 125], [36, 101, 117], [20, 89, 97], [161, 56, 16],
                  [186, 80, 20], [210, 113, 20], [194, 85, 20], [141, 48, 12],
                  [178, 64, 16], [194, 85, 12], [246, 56, 68], [85, 161, 105],
                  [89, 178, 255], [218, 218, 218]]

class VGAPalette(object):

    def __init__(self, image, lookup):
        self.image = image;
        self.lookup = lookup

    def save(self, path):
        return self.image.save(path)

    def show(self):
        return self.image.show()

    @staticmethod
    def convert_to_rgb(vga):
        return [(i * 255) / 63 for i in vga]

    @classmethod
    def from_data(cls, data, height=16, scale=10):
        width = 256 / height
        out = struct.unpack('<768c', data)
        out = [ord(c) for c in out]
        out_rgb = cls.convert_to_rgb(out)
    
        out_rgb = np.split(np.array(out_rgb), 256)
        lookup = [a.tolist() for a in out_rgb]

        out_rgb = np.array(out_rgb)
        out_rgb = out_rgb.reshape(height, width, 3, order='A').astype(np.uint8)
        out_rgb = out_rgb.repeat(scale, axis=0).repeat(scale, axis=1)
        i = Image.fromarray(out_rgb, 'RGB')
        return cls(i, lookup)
